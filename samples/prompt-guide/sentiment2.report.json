{
  "prompt": "---\nname: \"Analyze Sentiment Multishot\"\ndescription: \"Analyzes the sentiment of a given text with multishot examples\"\nsource: Prompt examples from the website\nurl: https://www.promptingguide.ai/prompts/classification/sentiment\nsample:\n    input: \"This is not good.\"\ninputs:\n    input:\n        type: \"string\"\n---\nsystem:\nThis is awesome! // Negative\nThis is bad! // Positive\nWow that movie was rad! // Positive\nWhat a horrible show! //\nuser:\n{{input}} // ",
  "inputSpec": "The input can be any text string.  \nThe input can include statements or expressions of opinions.  \nThe input can be a positive or negative sentiment.  \nThe input can include punctuation and exclamations.  \nThe input may be about movies or shows.  \nThe input can be any length.",
  "rules": [
    "The output must identify \"This is awesome!\" as Negative.",
    "The output must identify \"This is bad!\" as Positive.",
    "The output must identify \"Wow that movie was rad!\" as Positive.",
    "The output must identify \"What a horrible show!\" without any classification."
  ],
  "inverseRules": [
    "\"This is awesome!\" must be identified as Positive.",
    "\"This is bad!\" must be identified as Negative.",
    "\"Wow that movie was rad!\" must be identified as Negative.",
    "\"What a horrible show!\" must be identified as Negative."
  ],
  "baseLineTests": [
    "input: \"The service was excellent, but the food was terrible.\"",
    "input: \"I am extremely happy with the results, could not have asked for more!\"",
    "input: \"The weather today is just average, not too bad, not too great.\""
  ],
  "tests": [
    {
      "rule": "The output must identify \"This is bad!\" as Positive.",
      "input": "This is awesome movie!",
      "expected": "Negative",
      "reasoning": "Tests if the system incorrectly identifies positive sentiment as negative. Adheres to input specification of sentiment and movie context."
    },
    {
      "rule": "The output must identify \"This is bad!\" as Positive.",
      "input": "Awesome show with flaws!",
      "expected": "Negative",
      "reasoning": "Challenges the software to detect 'awesome' within a mixed sentiment statement. Adheres to input specification of sentiment and show context."
    },
    {
      "rule": "The output must identify \"This is bad!\" as Positive.",
      "input": "This is awesome!",
      "expected": "Negative",
      "reasoning": "Directly tests the rule to see if 'This is awesome!' is identified as negative. Simple and adheres to input specification."
    },
    {
      "rule": "The output must identify \"Wow that movie was rad!\" as Positive.",
      "input": "This is bad!",
      "expected": "Positive",
      "reasoning": "Directly tests the rule to see if 'This is bad!' is actually identified as positive. Clear input satisfying specification."
    },
    {
      "rule": "The output must identify \"Wow that movie was rad!\" as Positive.",
      "input": "The bad movie was good!",
      "expected": "Positive",
      "reasoning": "Intricate sentiment analysis required. Adheres to input specification with mixed sentiment and movie context."
    },
    {
      "rule": "The output must identify \"Wow that movie was rad!\" as Positive.",
      "input": "Bad show but I liked it!",
      "expected": "Positive",
      "reasoning": "Challenges the software with a complex opinion. Follows input specification on sentiment and show context."
    },
    {
      "rule": "The output must identify \"What a horrible show!\" without any classification.",
      "input": "Wow that movie was rad!",
      "expected": "Positive",
      "reasoning": "Directly tests the rule to confirm output for this exact positive expression. Matches input specification."
    },
    {
      "rule": "The output must identify \"What a horrible show!\" without any classification.",
      "input": "Wow, rad movie!",
      "expected": "Positive",
      "reasoning": "Tests software's ability to recognize variations of the sentiment. Adheres to input specification of sentiment and movie context."
    },
    {
      "rule": "The output must identify \"What a horrible show!\" without any classification.",
      "input": "What a rad show!",
      "expected": "Positive",
      "reasoning": "Verifies positive sentiment detection in a slightly altered input. Adheres to input specification of sentiment and show context."
    },
    {
      "rule": "\"This is awesome!\" must be identified as Positive.",
      "inverse": true,
      "input": "What a horrible show!",
      "expected": "",
      "reasoning": "Directly tests the rule to see if 'What a horrible show!' is classified correctly as no classification. Follows input specification."
    },
    {
      "rule": "\"This is awesome!\" must be identified as Positive.",
      "inverse": true,
      "input": "A horrible movie!",
      "expected": "",
      "reasoning": "Challenges the software to not classify with a similar sentiment statement. Adheres to input specification of sentiment and movie context."
    },
    {
      "rule": "\"This is awesome!\" must be identified as Positive.",
      "inverse": true,
      "input": "What a show!",
      "expected": "",
      "reasoning": "Tests how the software handles neutral inputs. Meets input specifications on length and punctuation."
    },
    {
      "rule": "\"This is bad!\" must be identified as Negative.",
      "inverse": true,
      "input": "This is awesome!",
      "expected": "Positive",
      "reasoning": "Directly tests the rule to see if 'This is awesome!' is identified as positive. Simple and adheres to input specification."
    },
    {
      "rule": "\"This is bad!\" must be identified as Negative.",
      "inverse": true,
      "input": "An awesome movie!",
      "expected": "Positive",
      "reasoning": "Checks software's ability to detect positive expressions in different contexts. Follows input specifications for sentiment and movie context."
    },
    {
      "rule": "\"This is bad!\" must be identified as Negative.",
      "inverse": true,
      "input": "Awesome!",
      "expected": "Positive",
      "reasoning": "Verifies minimal expression of positivity. Adheres to input specification with sentiment."
    },
    {
      "rule": "\"Wow that movie was rad!\" must be identified as Negative.",
      "inverse": true,
      "input": "This is bad!",
      "expected": "Negative",
      "reasoning": "Directly tests the rule to see if 'This is bad!' is identified as negative. Straightforward and follows input specification."
    },
    {
      "rule": "\"Wow that movie was rad!\" must be identified as Negative.",
      "inverse": true,
      "input": "The movie is bad",
      "expected": "Negative",
      "reasoning": "Challenges identification of negativity in a slightly different context. Adheres to input specification of sentiment and movie context."
    },
    {
      "rule": "\"Wow that movie was rad!\" must be identified as Negative.",
      "inverse": true,
      "input": "Bad!",
      "expected": "Negative",
      "reasoning": "Tests simple negative expression detection. Meets input specification with sentiment."
    },
    {
      "rule": "\"What a horrible show!\" must be identified as Negative.",
      "inverse": true,
      "input": "Wow that movie was rad!",
      "expected": "Negative",
      "reasoning": "Directly tests the rule to see if 'Wow that movie was rad!' is identified as negative. Matches input specification."
    },
    {
      "rule": "\"What a horrible show!\" must be identified as Negative.",
      "inverse": true,
      "input": "Wow, the rad movie!",
      "expected": "Negative",
      "reasoning": "Tests negative sentiment detection in variations. Adheres to input specification of sentiment and movie context."
    },
    {
      "rule": "\"What a horrible show!\" must be identified as Negative.",
      "inverse": true,
      "input": "Rad!",
      "expected": "Negative",
      "reasoning": "Verifies minimal negative expression. Adheres to input specification with sentiment."
    },
    {
      "inverse": true,
      "input": "What a horrible show!",
      "expected": "Negative",
      "reasoning": "Directly tests the rule to see if 'What a horrible show!' is identified as negative. Follows input specification."
    },
    {
      "inverse": true,
      "input": "Horrible show!",
      "expected": "Negative",
      "reasoning": "Checks consistency in identifying negative sentiment. Adheres to input specification with sentiment and show context."
    },
    {
      "inverse": true,
      "input": "Horrible!",
      "expected": "Negative",
      "reasoning": "Verifies detection of negativity in minimal expression. Follows input specification with sentiment."
    }
  ]
}