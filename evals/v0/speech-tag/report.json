{
  "prompt": "---\nname: Speech Tag\ndescription: Determine the part of speech for a given word\nsource: \"modified from 'SAMMO: A general-purpose framework for prompt optimization'\"\nurl: https://www.microsoft.com/en-us/research/uploads/prod/2024/04/Prompts-As-Programs_A-Structure-Aware-Approach.pdf\ninputs:\n    sentence:\n        type: \"string\"\n    word:\n        type: \"string\"\nsample:\n    sentence: \"The quick brown fox jumps over the lazy dog.\"\n    word: \"jumps\"\n---\nsystem:\nIn this task, you will be presented with a sentence and a word contained\nin that sentence. You have to determine the part of speech for a given word\nand return just the tag for the word's part of speech. \n\nReturn only the part of speech tag.  If the word cannot be tagged with\nthe listed tags, return Unknown.  If you are unable to tag the word, return\nCantAnswer.\n\nHere is the\nAlphabetical list of part-of-speech tags used in this task: CC: Coordinating conjunction, CD: Cardinal number, DT:\nDeterminer, EX: Existential there, FW: Foreign word, IN: Preposition or subordinating conjunction, JJ: Adjective, JJR:\nAdjective, comparative, JJS: Adjective, superlative, LS: List item marker, MD: Modal, NN: Noun, singular or mass, NNS: Noun,\nplural, NNP: Proper noun, singular, NNPS: Proper noun, plural, PDT: Predeterminer, POS: Possessive ending, PRP: Personal\npronoun, PRP$: Possessive pronoun, RB: Adverb, RBR: Adverb, comparative, RBS: Adverb, superlative, RP: Particle, SYM: Symbol,\nTO: to, UH: Interjection, VB: Verb, base form, VBD: Verb, past tense, VBG: Verb, gerund or present participle, VBN: Verb,\npast participle, VBP: Verb, non-3rd person singular present, VBZ: Verb, 3rd person singular present, WDT: Wh-determiner, WP:\nWh-pronoun, WP$: Possessive wh-pronoun, WRB: Wh-adverb\nuser:\n{{sentence}}; {{word}}",
  "inputSpec": "The input is a sentence followed by a specific word from that sentence.  \nThe input must contain a complete sentence.  \nThe input must include a word that is part of the provided sentence.  \nThe word must be clearly distinguishable from the rest of the sentence.  \nThe input sentence and word must be separated by a semicolon.  \nThe sentence and word must be separated by a space following the semicolon.",
  "rules": [
    "The output must contain only a single part of speech tag from the provided alphabetical list.",
    "If the word cannot be tagged with any of the listed tags, the output must be \"Unknown\".",
    "If unable to tag the word for any reason, the output must be \"CantAnswer\".",
    "The output must not contain any additional information, explanation, or punctuation beyond the tag itself."
  ],
  "inverseRules": [],
  "baseLineTests": [
    "sentence: \"The quick brown fox jumps over the lazy dog.\"; word: \"quick\"",
    "sentence: \"She sells sea shells by the sea shore.\"; word: \"sells\"",
    "sentence: \"He is the tallest student in the class.\"; word: \"tallest\"",
    "sentence: \"Can you pass me the salt?\"; word: \"pass\"",
    "sentence: \"There are many flowers in the garden.\"; word: \"There\"",
    "sentence: \"Learning new languages can be fun.\"; word: \"fun\"",
    "sentence: \"She has a Ph.D. in Mathematics.\"; word: \"Ph.D.\"",
    "sentence: \"Yesterday, it rained heavily.\"; word: \"heavily\"",
    "sentence: \"I bought two apples and three oranges.\"; word: \"two\"",
    "sentence: \"Don’t touch that button!\"; word: \"button\"",
    "sentence: \"The book on the table is mine.\"; word: \"on\"",
    "sentence: \"I sometimes wonder about the future.\"; word: \"sometimes\"",
    "sentence: \"Wow! That’s amazing!\"; word: \"Wow\"",
    "sentence: \"The meeting will be held at 3 PM.\"; word: \"will\"",
    "sentence: \"Give me a moment, please.\"; word: \"moment\"",
    "sentence: \"To err is human.\"; word: \"To\"",
    "sentence: \"The beautiful painting was appreciated by all.\"; word: \"beautiful\"",
    "sentence: \"Dogs bark loudly when strangers approach.\"; word: \"bark\"",
    "sentence: \"I need to buy some groceries.\"; word: \"groceries\"",
    "sentence: \"This is a once-in-a-lifetime opportunity.\"; word: \"opportunity\""
  ],
  "tests": [
    {
      "rule": "The output must contain only a single part of speech tag from the provided alphabetical list.",
      "input": "The quick brown fox jumps over the lazy dog; fox",
      "expected": "NN",
      "reasoning": "Tests whether 'fox' is correctly tagged as a singular noun, ensuring adherence to rule by returning only the single tag 'NN'."
    },
    {
      "rule": "The output must contain only a single part of speech tag from the provided alphabetical list.",
      "input": "She will quickly finish her homework; quickly",
      "expected": "RB",
      "reasoning": "Tests the ability to correctly identify 'quickly' as an adverb, validating that only 'RB' is returned, adhering to the rule."
    },
    {
      "rule": "The output must contain only a single part of speech tag from the provided alphabetical list.",
      "input": "Wow, such a beautiful painting!; Wow",
      "expected": "UH",
      "reasoning": "Tests the correct tagging of 'Wow' as an interjection, verifying that only 'UH' is returned according to the rule."
    },
    {
      "rule": "If the word cannot be tagged with any of the listed tags, the output must be \"Unknown\".",
      "input": "The number 42 is significant in the story; 42",
      "expected": "CD",
      "reasoning": "Checks if '42' is tagged as a cardinal number, which should return 'CD', ensuring conformity with the rule."
    },
    {
      "rule": "If the word cannot be tagged with any of the listed tags, the output must be \"Unknown\".",
      "input": "There are no unicorns in the garden; unicorns",
      "expected": "NNS",
      "reasoning": "Tests whether 'unicorns' is tagged as a plural noun, expecting 'NNS' to ensure compliance with the rule."
    },
    {
      "rule": "If the word cannot be tagged with any of the listed tags, the output must be \"Unknown\".",
      "input": "They might have left already; might",
      "expected": "MD",
      "reasoning": "Verifies that 'might' is tagged as a modal verb, expecting 'MD' to test adherence to the rule."
    },
    {
      "rule": "If unable to tag the word for any reason, the output must be \"CantAnswer\".",
      "input": "She called the number yesterday; number",
      "expected": "Unknown",
      "reasoning": "Tests correct handling of a word that cannot be determined from context, expecting 'Unknown' to adhere to the rule."
    },
    {
      "rule": "If unable to tag the word for any reason, the output must be \"CantAnswer\".",
      "input": "His answers were not understandable; understandable",
      "expected": "Unknown",
      "reasoning": "Checks if 'understandable' is correctly returned as 'Unknown' due to insufficient context, ensuring rule compliance."
    },
    {
      "rule": "If unable to tag the word for any reason, the output must be \"CantAnswer\".",
      "input": "It seems like a quandary; quandary",
      "expected": "Unknown",
      "reasoning": "Verifies that 'quandary' returns 'Unknown' due to its ambiguous nature, ensuring conformity with the rule."
    },
    {
      "rule": "The output must not contain any additional information, explanation, or punctuation beyond the tag itself.",
      "input": "The apple was eaten by John; eaten",
      "expected": "VBN",
      "reasoning": "Checks that 'eaten' is correctly tagged as a past participle verb, returning only 'VBN' to follow the rule."
    },
    {
      "rule": "The output must not contain any additional information, explanation, or punctuation beyond the tag itself.",
      "input": "If you could simply decide; decide",
      "expected": "VB",
      "reasoning": "Tests correct tagging of 'decide' as a base form verb, ensuring that only 'VB' is returned to adhere to the rule."
    },
    {
      "rule": "The output must not contain any additional information, explanation, or punctuation beyond the tag itself.",
      "input": "Cats are adorable animals; adorable",
      "expected": "JJ",
      "reasoning": "Verifies that 'adorable' is tagged as an adjective, expecting 'JJ' to affirm rule compliance."
    }
  ]
}